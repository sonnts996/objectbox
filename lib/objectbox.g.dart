// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/data/local/model/profile_model.dart';
import 'src/data/local/model/token_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 805905904597783544),
      name: 'TokenModel',
      lastPropertyId: const IdUid(5, 3418596658453647601),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8362732242276481544),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6485056160309861472),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4146581360866011165),
            name: 'token',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6161475802537037476),
            name: 'expiredDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3418596658453647601),
            name: 'dbProfileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 3002693229314072528),
            relationTarget: 'ProfileModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7875101509040120778),
      name: 'ProfileModel',
      lastPropertyId: const IdUid(4, 2969905923124016595),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 648923670099274939),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1761548500329091965),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6799593146172206327),
            name: 'weight',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2969905923124016595),
            name: 'height',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 7875101509040120778),
      lastIndexId: const IdUid(1, 3002693229314072528),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    TokenModel: EntityDefinition<TokenModel>(
        model: _entities[0],
        toOneRelations: (TokenModel object) => [object.dbProfile],
        toManyRelations: (TokenModel object) => {},
        getId: (TokenModel object) => object.id,
        setId: (TokenModel object, int id) {
          object.id = id;
        },
        objectToFB: (TokenModel object, fb.Builder fbb) {
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final tokenOffset = fbb.writeString(object.token);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, tokenOffset);
          fbb.addInt64(3, object.expiredDate?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.dbProfile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final expiredDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = TokenModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              token: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              expiredDate: expiredDateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(expiredDateValue));
          object.dbProfile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.dbProfile.attach(store);
          return object;
        }),
    ProfileModel: EntityDefinition<ProfileModel>(
        model: _entities[1],
        toOneRelations: (ProfileModel object) => [],
        toManyRelations: (ProfileModel object) => {},
        getId: (ProfileModel object) => object.id,
        setId: (ProfileModel object, int id) {
          object.id = id;
        },
        objectToFB: (ProfileModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.weight);
          fbb.addInt64(3, object.height);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProfileModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              weight:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              height:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [TokenModel] entity fields to define ObjectBox queries.
class TokenModel_ {
  /// see [TokenModel.id]
  static final id =
      QueryIntegerProperty<TokenModel>(_entities[0].properties[0]);

  /// see [TokenModel.username]
  static final username =
      QueryStringProperty<TokenModel>(_entities[0].properties[1]);

  /// see [TokenModel.token]
  static final token =
      QueryStringProperty<TokenModel>(_entities[0].properties[2]);

  /// see [TokenModel.expiredDate]
  static final expiredDate =
      QueryIntegerProperty<TokenModel>(_entities[0].properties[3]);

  /// see [TokenModel.dbProfile]
  static final dbProfile =
      QueryRelationToOne<TokenModel, ProfileModel>(_entities[0].properties[4]);
}

/// [ProfileModel] entity fields to define ObjectBox queries.
class ProfileModel_ {
  /// see [ProfileModel.id]
  static final id =
      QueryIntegerProperty<ProfileModel>(_entities[1].properties[0]);

  /// see [ProfileModel.name]
  static final name =
      QueryStringProperty<ProfileModel>(_entities[1].properties[1]);

  /// see [ProfileModel.weight]
  static final weight =
      QueryIntegerProperty<ProfileModel>(_entities[1].properties[2]);

  /// see [ProfileModel.height]
  static final height =
      QueryIntegerProperty<ProfileModel>(_entities[1].properties[3]);
}
